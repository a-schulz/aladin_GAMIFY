@startuml architecture_after
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
'skinparam linetype polyline
skinparam linetype ortho

' Diagram title
title Lernplattform ALADIN - gamifiziert\n

AddRelTag("authentification", $textColor="orange", $lineColor="orange", $lineStyle = DashedLine())
AddElementTag("gamification", $bgColor="#444444")
' Diagram syntax
Person(person, "Benutzer")

' Diagram syntax
System_Boundary(aladin, "Lernplattform ALADIN") {
    Container(gamify_authentication, "SkillTree Authentifizierung", "Java Spring Boot", $tags="gamification")
    Container(gamify_dataimporter, "SkillTree Dataimporter", "Java Spring Boot", $tags="gamification")
    Container(gamify, "SkillTree Backend", "Java Spring Boot", $tags="gamification")
    Container(aladin_backend, "ALADIN Backend", "NodeJS, LTI - Server")
    Container(aladin_frontend, "ALADIN Frontend", "VueJS, Nginx")
    ContainerDb(dbpg, "Datenbank", "Postgres", "SkillTree Daten, Benutzerdaten, SQL Aufgaben")
    ContainerDb(dbmongo, "Datenbank", "MongoDB", "Aufgabendefinitionen, ALADIN Konfigurationen")
}

Rel_R(person, aladin_frontend, "[1] Zugriff")
Rel(aladin_frontend, gamify_authentication, "[2] Authentifizierung", $tags="authentification")
Rel(gamify_authentication, gamify, "[2] Authentifizierung", $tags="authentification")
Rel(aladin_frontend, aladin_backend, "[2]")
Rel(aladin_frontend, gamify, "[3]")
Rel(gamify, dbpg, "[3] Lesen/Schreiben")
Rel_L(gamify_dataimporter, dbpg, "[adhoc] Lesen/Schreiben")
Rel(aladin_backend, dbmongo, "[3] Lesen/Schreiben")
Rel(aladin_backend, dbpg, "[3] Lesen/Schreiben")
Lay_L(dbpg, aladin_backend)
' Use complete legend
LAYOUT_WITH_LEGEND()
' calculated legend, only show used items
SHOW_LEGEND()
@enduml